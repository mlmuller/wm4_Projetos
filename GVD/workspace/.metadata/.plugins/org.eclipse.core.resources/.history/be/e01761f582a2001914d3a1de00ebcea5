package br.com.gvdexport.controller;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import javax.annotation.PostConstruct;
import javax.enterprise.context.SessionScoped;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;
import javax.inject.Inject;
import javax.inject.Named;
import javax.ws.rs.Produces;

import org.primefaces.context.RequestContext;

import br.com.gvdexport.dao.CrudDao;
import br.com.gvdexport.facade.DGAFacade;
import br.com.gvdexport.model.DGAMenu;
import br.com.gvdexport.model.DGAModulo;
import br.com.gvdexport.model.DGAUsuarioNivel;
import br.com.gvdexport.model.DGAPrivilegio;
import br.com.gvdexport.model.DGASistema;
import br.com.gvdexport.model.Usuario;
import lombok.Getter;
import lombok.Setter;
@Produces
@Named
@SessionScoped
public class PrivilegioController implements Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	@Inject 
	protected UsuarioController usuarioController;
	@Inject
	private DGAFacade dgaFacade;
	@Getter @Setter
	private DGAPrivilegio dgaPrivilegio;
	@Getter @Setter
	private List<DGAPrivilegio> dgaPrivilegios;
	@Getter @Setter
	private List<DGAPrivilegio> TodosPrivilegios;
	@Getter @Setter
	private List<DGAPrivilegio> todosPrivilegiosUsuario;
	@Getter @Setter
	private List<DGAModulo> dgaModulos;
	@Getter @Setter
	private List<Usuario> usuarios;
	@Getter @Setter
	private Usuario usuario;
	@Getter @Setter
	private List<DGASistema> dgaSistemas;
	@Getter @Setter
	private List<DGAMenu> dgaMenus;
	@Getter @Setter
	private Boolean ok;

	
	@Inject 
	private CrudDao<DGAPrivilegio, Long> privilegioDao;
	@Inject
	private CrudDao<DGAUsuarioNivel, Long> permissaoNivelDao; 
	
	@PostConstruct
	public void init() {
		dgaPrivilegios = new ArrayList<DGAPrivilegio>();
		refresh();
		add();
	}
	
	public void add() {
		this.dgaPrivilegio = new DGAPrivilegio();
	}
	
	public void preparePrivilegio(Usuario usuario, Boolean permissao) {
		this.usuario = usuario;
		ok=false;
		TodosPrivilegios = new ArrayList<>();
		dgaPrivilegios = dgaFacade.getPrivilegios();
		todosPrivilegiosUsuario = new ArrayList<>();
		todosPrivilegiosUsuario = dgaFacade.getUsuarioPermissoes(usuario.getUsuarioid());
        permissao = false;
		if(todosPrivilegiosUsuario.size() != 0) {
	        FacesContext fc = FacesContext.getCurrentInstance();
	        FacesMessage fm1 = new FacesMessage(FacesMessage.SEVERITY_WARN,"Permissoes já estao cadastradas...","");
	        FacesMessage fm2 = new FacesMessage(FacesMessage.SEVERITY_WARN,"Somente Editar Este Usuário...","");
	        fc.addMessage("", fm1);
	        fc.addMessage("", fm2);	
	        if(!eValidoCriarPermissao(permissao)) {
	        	return;
	        }
		}
		if(dgaPrivilegios.size() != 0) {
			permissao=true;
			if (!eValidoCriarPermissao(permissao)) {
				ok=false;
			}
		}else {
			permissao = true;
			ok=true;
	}
		Integer ordem = 1;
		//Primeiro dgasistema
		for (int i = 0; i < dgaSistemas.size(); i++) {
			//Segundo DGAMenus
			for (int j = 0; j < dgaMenus.size(); j++) {
				if(dgaSistemas.get(i).getDgasistemaid().equals(dgaMenus.get(j).getDgasistema().getDgasistemaid())) {
					//Terceiro DGAModulos
					for (int k = 0; k < dgaModulos.size(); k++) {
						if(dgaMenus.get(j).getDgamenuid().equals(dgaModulos.get(k).getDgamenu().getDgamenuid())) {
							dgaPrivilegio.setDatastamp(dgaFacade.gettimeStamp());
							dgaPrivilegio.setDgamoduloid(dgaModulos.get(k).getDgamoduloid());
							dgaPrivilegio.setDgamodulo(dgaModulos.get(k));
							dgaPrivilegio.setDgausuarioid(usuario.getUsuarioid());
							dgaPrivilegio.setPrivdelete(ok);
							dgaPrivilegio.setPrivinsert(ok);
							dgaPrivilegio.setPrivupdate(ok);
							dgaPrivilegio.setPrivselect(ok);
							dgaPrivilegio.setPrivwhere("");
							dgaPrivilegio.setDgamenu(dgaModulos.get(k).getDgamenu());
							dgaPrivilegio.setDgasistema(dgaModulos.get(k).getDgamenu().getDgasistema());
							dgaPrivilegio.setUsuariostamp(usuario.getUsuario());
							dgaPrivilegio.setDatastamp(dgaFacade.gettimeStamp());
							dgaPrivilegio.setUsuario(usuario);
							dgaPrivilegio.setOrdem(ordem);
							dgaPrivilegio.setNomemenu(dgaModulos.get(k).getDgamenu().getNome());
							dgaPrivilegio.setNomeModulo(dgaModulos.get(k).getNome());
							dgaPrivilegio.setNomesistema(dgaModulos.get(k).getDgamenu().getDgasistema().getNome());
							dgaPrivilegio.setPermissao(0);
							TodosPrivilegios.add(dgaPrivilegio);
							dgaPrivilegio=new DGAPrivilegio();
						}
					}
					ordem++;
				}
			}
		}
		//Sera executado somente, na primeira vez que o sistema for instalado com base no usuario,
		//Master definido,em linha fixa...
		if ((permissao) && dgaPrivilegios.size() == 0) {
			save();
			dgaPrivilegios =  new ArrayList<DGAPrivilegio>();
			dgaPrivilegios = dgaFacade.getPrivilegios();
		}
		//ultima etapa ordernar...vetor preenchido..
		dgaPrivilegio = new DGAPrivilegio();
	}
	public void prepareComplementacao(Usuario usuario) {
		todosPrivilegiosUsuario = new ArrayList<>();
		todosPrivilegiosUsuario = dgaFacade.getUsuarioPermissoes(usuario.getUsuarioid());
		dgaPrivilegio = new DGAPrivilegio();
		for (int i = 0; i < dgaModulos.size(); i++) {
			for (int j = 0; j < todosPrivilegiosUsuario.size(); j++) {
				if((dgaModulos.get(i).getDgamenu().getDgasistema().getDgasistemaid().equals(todosPrivilegiosUsuario.get(j).getDgasistema().getDgasistemaid()) &&
						(dgaModulos.get(i).getDgamoduloid().equals(todosPrivilegiosUsuario.get(j).getDgamoduloid()) && 
								(dgaModulos.get(i).getDgamenu().getDgamenuid().equals(todosPrivilegiosUsuario.get(j).getDgamenu().getDgamenuid()))))) {
					if((todosPrivilegiosUsuario.get(j).getPrivinsert())||(todosPrivilegiosUsuario.get(j).getPrivupdate())||(todosPrivilegiosUsuario.get(j).getPrivdelete())) {
						todosPrivilegiosUsuario.get(j).setPermissao(1);
						//0=Nao foi definido nenhuma permissao
						//1=Ja possui permissao
						//2=Nova opcao
					}else {
						if(todosPrivilegiosUsuario.get(j).getPermissao().equals(1)) {
							todosPrivilegiosUsuario.get(j).setPermissao(0);
						}
					}
					
				}else {
					//nova opcao
					dgaPrivilegio.setDatastamp(dgaFacade.gettimeStamp());
					dgaPrivilegio.setDgamoduloid(dgaModulos.get(i).getDgamoduloid());
					dgaPrivilegio.setDgamodulo(dgaModulos.get(i));
					dgaPrivilegio.setDgausuarioid(usuario.getUsuarioid());
					dgaPrivilegio.setPrivdelete(ok);
					dgaPrivilegio.setPrivinsert(ok);
					dgaPrivilegio.setPrivupdate(ok);
					dgaPrivilegio.setPrivselect(ok);
					dgaPrivilegio.setPrivwhere("");
					dgaPrivilegio.setDgamenu(dgaModulos.get(i).getDgamenu());
					dgaPrivilegio.setDgasistema(dgaModulos.get(i).getDgamenu().getDgasistema());
					dgaPrivilegio.setUsuariostamp(usuario.getUsuario());
					dgaPrivilegio.setDatastamp(dgaFacade.gettimeStamp());
					dgaPrivilegio.setUsuario(usuario);
					dgaPrivilegio.setOrdem(1);
					dgaPrivilegio.setNomemenu(dgaModulos.get(i).getDgamenu().getNome());
					dgaPrivilegio.setNomeModulo(dgaModulos.get(i).getNome());
					dgaPrivilegio.setNomesistema(dgaModulos.get(i).getDgamenu().getDgasistema().getNome());
					dgaPrivilegio.setPermissao(0);
					dgaPrivilegio.setPermissao(2);
					todosPrivilegiosUsuario.add(dgaPrivilegio);
				}
			}
		}
		FacesContext context = FacesContext.getCurrentInstance();
		try {
			for ( DGAPrivilegio dgaPrivilegio:todosPrivilegiosUsuario) {
				privilegioDao.update(dgaPrivilegio);
			}
		} catch (RuntimeException ex) {
			context.addMessage(null,new FacesMessage("Não foi possivel atualizar Privilegios , do usuario :"+usuario.getUsuario()));
		}
	}
	public void visualizePermissoes(Usuario usuario) {
		
	}
	public void blocoPermissoes(Usuario usuario) {
		
	}
	public void edit(DGAPrivilegio dgaprivilegio) {
		this.dgaPrivilegio = dgaprivilegio;
	}
	public void save() {
		FacesContext context = FacesContext.getCurrentInstance();
		try {
			DGAUsuarioNivel permissaoNivel = new DGAUsuarioNivel();
			for (DGAPrivilegio dgaPrivilegio:TodosPrivilegios){
				dgaPrivilegio.setPermissao(1);
				privilegioDao.update(dgaPrivilegio);
				if(dgaPrivilegio.getPrivdelete().equals(true) || dgaPrivilegio.getPrivinsert().equals(true) || 
					dgaPrivilegio.getPrivupdate().equals(true) || dgaPrivilegio.getPrivselect().equals(true)) {
					permissaoNivel.setDgamenu(dgaPrivilegio.getDgamenu());
					permissaoNivel.setOrdemmenu(dgaPrivilegio.getDgamenu().getOrdem());
					permissaoNivel.setDgamodulo(dgaPrivilegio.getDgamodulo());
					permissaoNivel.setOrdemitem(dgaPrivilegio.getDgamodulo().getOrdem());
					permissaoNivel.setDgasistema(dgaPrivilegio.getDgasistema());
					permissaoNivel.setOrdembarra(dgaPrivilegio.getDgasistema().getOrdem());
					permissaoNivel.setUrl(dgaPrivilegio.getDgamodulo().getUrl());
					permissaoNivel.setPrivdelete(dgaPrivilegio.getPrivdelete());
					permissaoNivel.setPrivinsert(dgaPrivilegio.getPrivinsert());
					permissaoNivel.setPrivupdate(dgaPrivilegio.getPrivupdate());
					permissaoNivel.setPrivselect(dgaPrivilegio.getPrivselect());
					permissaoNivel.setDgausuarionivelid(dgaPrivilegio.getDgausuarioid());
					permissaoNivel.setNivelbarra(dgaPrivilegio.getNomesistema());
					permissaoNivel.setNivelsubmenu(dgaPrivilegio.getNomemenu());
					permissaoNivel.setNivelsubitem(dgaPrivilegio.getNomeModulo());
					permissaoNivel.setIconesistema(dgaPrivilegio.getDgasistema().getIconesistema());
					//Esta informacao sera customizada pelo usuario
					permissaoNivel.setStylemenu("font-size:12px;");
					//
					permissaoNivel.setUsuario(getUsuario());
					permissaoNivelDao.update(permissaoNivel);
					permissaoNivel=new DGAUsuarioNivel();
				}
			}
			refresh();
			add();
			context.addMessage(null, new FacesMessage("Modulo(s) Adicionado(s) com Sucesso!"));
		} catch (RuntimeException ex) {
			context.addMessage(null, new FacesMessage("Não foi possivel adicionar Privilégios!"));
			ex.printStackTrace();
		}
	}
	
	public void delete(DGAPrivilegio dgaPrivilegio) {
		FacesContext context = FacesContext.getCurrentInstance();
		try {
			privilegioDao.delete1(dgaPrivilegio);
			refresh();
			context.addMessage(null, new FacesMessage("Módulo Cancelado com Sucesso!"));
		} catch (RuntimeException ex) {
			context.addMessage(null, new FacesMessage("Não foi possivel Cancelar Módulo!"));
			ex.printStackTrace();
		}
	}

	private void refresh() {
	dgaPrivilegios = dgaFacade.getPrivilegios();
		  usuarios = dgaFacade.getUsuarios();
	    dgaModulos = dgaFacade.getModulos();
	    dgaSistemas= dgaFacade.getSistemas();
	      dgaMenus = dgaFacade.getMenus();
	}

	public boolean eValidoCriarPermissao(Boolean validaCriacaoPermissao) {
	    if((!validaCriacaoPermissao)) {
	    	RequestContext request = RequestContext.getCurrentInstance(); request.addCallbackParam("eValido", false);

	        return false;
	    }
    	RequestContext request = RequestContext.getCurrentInstance(); request.addCallbackParam("eValido", true);
	    return true;
	}
}
